#--------------图像读取，显示，保存--------------------#
#图像文件名
#读取图像方式：0,1,-1
#图像显示方式：cv2.imshow,plt.show
#图像保存方式：cv2.imwrite

import cv2
filename='D:\\opencv_python\\fengjing.jpg'
img=cv2.imread(filename,cv2.IMREAD_GRAYSCALE)
或者 
IMREAD_COLOR
IMREAD_UNCHANGED
0 灰度
1 颜色
-1 原样

#show image
cv2.imshow('image',img)
cv2.waitKey(0)
必须有waitKey才能显示

#another way to show a image
plt.imshow(img,cmap='gray',interpolation='bicubic')
plt.plot([50,100],[80,100],'c',linewidth=5)#画一条线
plt.show()

#save image
cv2.imwrite('tupian.png',img)#save image



-------------
video breaks down to frames frames are just like images

#打开摄像头
#看到录像
#改为黑白视频
#保存录像
import cv2
import numpy as np

cap=cv2.VideoCapture(0)

fourcc=cv2.VideoWriter_fourcc(*'XVID')
out=cv2.VideoWriter('D:\\opencv_python\\output.avi',fourcc,20.0,(640,480))

while True:
   ret,frame=cap.read()
   gray=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
   out.write(frame)
   cv2.imshow('frame',frame)
   cv2.imshow('gray',gray)
   if(cv2.waitKey(1) & 0xFF==ord('q')):
       break

cap.release()
out.release()
cv2.destroyAllWindow()


----------------------------------------------------
#draw



bgr (255,0,0)蓝色
rgb (255,0,0) 红色

-------------------------------------------
#画直线
#画矩形
#画圆形
#写文本



import numpy as np
import cv2
filename='D:\\opencv_python\\fengjing.jpg'
img=cv2.imread(filename,cv2.IMREAD_COLOR)

cv2.line(img,(0,0),(150,150),(0,0,255),10)#红色
cv2.rectangle(img,(15,25),(200,150),(0,255,0),5)#绿色
cv2.circle(img,(100,63),55,(255,120,0),-1)


pts=np.array([[10,5],[20,30],[70,20],[50,10]],np.int32)
cv2.polylines(img,[pts],True,(0,255,255),3)

font=cv2.FONT_HERSHEY_SIMPLEX
cv2.putText(img,'OpenCV',(30,130),font,1,(200,255,255),2,cv2.LINE_AA)

#修改不同参数，试试效果如何。

cv2.imshow('image',img)
cv2.waitKey(0)
cv2.destroyAllWindows()


-----------------basic image operations---------------------------------------------
#查看像素值
#修改像素值
#选择某个区域
#把某个区域，复制到另外一个区域
#ROI region of image
#处理图像，点处理，针对某个像素的值
#区域处理，针对某个区域

import numpy as np
import cv2

filename="D:\\opencv_python\\fengjing.jpg"

img=cv2.imread(filename,cv2.IMREAD_COLOR)

#查看某个像素的值
px=img[55,55]
print(px)

#修改某个像素的值
img[55,55]=[255,255,255]
px=img[55,55]
print(px)

#ROI stands for region of image
#sub image
#图片某个区域

roi=img[100:150,100:150]
print(roi)

#图片某个区域，设置为白色，就出现一个白色的框
img[100:150,100:150]=[255,255,255]

quyu_from=img[50:200,250:350]#复制这个区域
img[0:150,0:100]=quyu_from   #粘贴到新的位置




cv2.imshow('image',img)

cv2.waitKey(0)
cv2.destroyAllWindows()

#复制，粘贴


----------------------------------------
simple image arithmetics as well as logical operations


import cv2
import numpy as np

filename='D:\\opencv_python\\flower.jpg'
filename1='D:\\opencv_python\\ice.jpg'
img1=cv2.imread(filename)
img2=cv2.imread(filename1)

cv2.imshow('img1',img1)
cv2.imshow('img2',img2)
print(img1.shape)
print(img2.shape)

add=img1+img2
cv2.imshow('add',add)

add1=cv2.add(img1,img2)
cv2.imshow('add1',add1)

#----
weighted=cv2.addWeighted(img1,0.6,img2,0.4,0)
cv2.imshow('weighted',weighted)


cv2.waitKey(0)
cv2.destroyAllWindows()

-----------------------------------------------
#把一张图片，P到了另外一张图片里面。

import cv2
import numpy as np

img1=cv2.imread('D:\\opencv_python\\ice.jpg')
img2=cv2.imread('D:\\opencv_python\\logo.jpg')

rows,cols,channels=img2.shape

roi=img1[0:rows,0:cols]

img2gray=cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)

ret,mask=cv2.threshold(img2gray,220,255,cv2.THRESH_BINARY_INV)

cv2.imshow('mask',mask)
#逻辑运算
mask_inv=cv2.bitwise_not(mask)

img1_bg=cv2.bitwise_and(roi,roi,mask=mask_inv)

img2_fg=cv2.bitwise_and(img2,img2,mask=mask)

dst=cv2.add(img1_bg,img2_fg)

img1[0:rows,0:cols]=dst
cv2.imshow('img1',img1)
cv2.imwrite('D:\\opencv_python\\logo_add.jpg',img1)

cv2.imshow('mask_inv',mask_inv)
cv2.imshow('img1_bg',img1_bg)
cv2.imshow('img2_fg',img2_fg)
cv2.imshow('dst',dst)



cv2.waitKey(0)
cv2.destroyAllWindows()





------------threshold----------------

Thresholds
Because thresholds are used to 
Even further
Simplify an image
Understand where edges are



simplification of an image
图像二值化

gradients

--------------threshold--------------------------
#图片选择
#参数选择
#算法应用于不同的图片，效果不同
#选择不同的参数，效果不同


import cv2
import numpy as np

filename='D:\\opencv_python\\book4.jpg'
img=cv2.imread(filename,1)

retval,threshold=cv2.threshold(img,120	,255,cv2.THRESH_BINARY)

grayscaled=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
retval2,threshold2=cv2.threshold(grayscaled,12,255,cv2.THRESH_BINARY)
retval3,otsu=cv2.threshold(grayscaled,125,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)

gaus=cv2.adaptiveThreshold(grayscaled,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,115,1)


cv2.imshow('orignial',img)
cv2.imshow('grayscaled',grayscaled)
cv2.imshow('threshold',threshold)
cv2.imshow('threshold2',threshold2)
cv2.imshow('otsu',otsu)
cv2.imshow('gaus',gaus)
cv2.waitKey(0)
cv2.destroyAllWindows()



#-----Gaussian adaptive threshold-------------



#------------------------------#
filter a color,颜色过滤
find range of colors

查找颜色
如果是绿色的，就显示
其他颜色的，都不显示
如果出现了绿色，就报警。
如果没有出现绿色，就不报警。
根据颜色来检测。

#-----------------------------#
#find color
import cv2
import numpy as np

cap=cv2.VideoCapture(0)
while True:
    _,frame=cap.read()
    hsv=cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)
    #hsv stands for hue saturation and value,
    #颜色空间
    #为什么使用hsv，不使用rgb
    #hsv ,每个分量独立。
    lower_red=np.array([150,150,50])
    upper_red=np.array([180,255,255])
   
    mask=cv2.inRange(hsv,lower_red,upper_red)
    res=cv2.bitwise_and(frame,frame,mask=mask)
    cv2.imshow('frame',frame)
    cv2.imshow('mask',mask)
    cv2.imshow('res',res)
    k=cv2.waitKey(5) & 0xFF
    if k==27:
       break

cv2.destroyAllWindows()
cap.release()




#------------------------------#

remove noise
smoothing and blurring to get rid of noise
different types of noise

To be continued...




---------------------------face ,eye detect--------------------------
#检测到了左眼,偶尔检测到了双眼
#有时候检测到了嘴巴
#检测到了脸
#使用github上面的xml，出错。使用了安装cv路径下的xml文件，运行正确。
#C:\ProgramData\Anaconda3\envs\test_tensorflow\Lib\site-packages\cv2\data
#参考https://blog.csdn.net/SekFu/article/details/87558514
import cv2
import numpy as np

face_cascade=cv2.CascadeClassifier('D:\\opencv_python\\haarcascade_frontalface_default.xml')
eye_cascade=cv2.CascadeClassifier('D:\\opencv_python\\haarcascade_eye.xml')
print(face_cascade)
cap=cv2.VideoCapture(0)

while True:
   ret,img=cap.read()
   gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
   faces=face_cascade.detectMultiScale(gray,1.3,5)

   for (x,y,w,h) in faces:
      cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
      roi_gray=gray[y:y+h,x:x+w]
      roi_color=img[y:y+h,x:x+w]
      eyes=eye_cascade.detectMultiScale(roi_gray)
      for(ex,ey,ew,eh) in eyes:
          cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)

   cv2.imshow('img',img)
   k=cv2.waitKey(30) & 0xff
   if k==27:
      break
cap.release()

#读取图片
#显示图片
img=cv2.imread('D:\\opencv_python\\a.jpg')
cv2.imshow('fish',img)
cv2.waitKey(0)
cv2.destroyAllWindows()

------------------------------------------------------------------
#make your own cascade for object detection

a lot of xml files
detect face
detect eye








ref
https://www.pythonprogramming.net/loading-images-python-opencv-tutorial/

sentdex youtube video

https://pythonspot.com/car-tracking-with-cascades/

https://abhishek4273.com/2014/03/16/traincascade-and-car-detection-using-opencv/

https://cogcomp.seas.upenn.edu/Data/Car/






























ref
https://www.pythonprogramming.net/

























